const connection = require("./core/db"); // <-- path ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á

exports.autoExpireRequests = async () => {
  try {
    const now = new Date();

    // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á Time Zone Bangkok (Asia/Bangkok)
    const options = { timeZone: "Asia/Bangkok", hour12: false };
    const formattedNow = new Intl.DateTimeFormat("en-GB", options).format(now);

    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô MySQL format (YYYY-MM-DD HH:mm:ss)
    const mysqlFormattedNow = formattedNow.replace(", ", " ");

    const sql = `
      UPDATE room_request
      SET request_status = '‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏'
      WHERE request_status IN ('‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£', '‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥')
        AND TIMESTAMP(used_date, end_time) <= CONVERT_TZ(NOW(), 'UTC', 'Asia/Bangkok');
    `;

    connection.query(sql, [mysqlFormattedNow], (err, result) => {
      if (err) {
        console.error("‚ùå Query error:", err);
        return;
      }
      console.log(`üïí ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß: ${result.affectedRows} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    });
  } catch (error) {
    console.error("‚ùå Error in autoExpireRequests:", error);
  }
};
