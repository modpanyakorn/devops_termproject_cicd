// Toggle sidebar
function toggleSidebar() {
  const sidebar = document.getElementById("sidebar");
  const overlay = document.getElementById("overlay");
  sidebar.classList.toggle("active");
  overlay.classList.toggle("active");
}

// ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ï‡∏≤‡∏° Radio Button ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
document
  .querySelectorAll('input[name="booking-type"]')
  .forEach(function (radio) {
    radio.addEventListener("change", function () {
      if (this.value === "‡∏ô‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤") {
        window.location.href = "./TimeOut.html";
      } else if (this.value === "‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤") {
        window.location.href = "./TimeIn.html";
      }
    });
  });

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô "08:00:00" -> "8.00"
function formatTimeForDisplay(timeStr) {
  if (!timeStr) return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";

  const parts = timeStr.split(":");
  if (parts.length < 2) return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";

  let hour = parts[0];
  const minute = parts[1];
  if (hour.startsWith("0")) hour = hour.substring(1);
  return hour + "." + minute;
}

// ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡πâ‡∏≠‡∏á
async function loadRoomDetails(roomId) {
  try {
    const response = await fetch(`${API_URL}/booker/roomdetail`);
    if (!response.ok) throw new Error("HTTP error " + response.status);
    const rooms = await response.json();

    const roomDetail = rooms.find((room) => room.room_id == roomId);
    if (roomDetail) {
      document.getElementById("room-info").textContent =
        roomDetail.room_name || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
      document.getElementById("room-type-info").textContent =
        roomDetail.room_type || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
    } else {
      document.getElementById("room-info").textContent = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
      document.getElementById("room-type-info").textContent = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
    }
  } catch (err) {
    console.error("Error fetching room details:", err);
    document.getElementById("room-info").textContent = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
    document.getElementById("room-type-info").textContent = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
function displaySelectedComputers() {
  const urlParams = new URLSearchParams(window.location.search);
  const desksParam = urlParams.get("desks");
  const roomId = urlParams.get("room");
  const computerTableBody = document.getElementById("computer-table-body");

  if (!desksParam) {
    computerTableBody.innerHTML = `<tr><td colspan="2">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå</td></tr>`;
    return;
  }

  const deskItems = desksParam.split(",").map((d) => parseInt(d.trim(), 10));

  // ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß‡∏•‡∏∞ 10 ‡∏ï‡∏±‡∏ß (‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á)
  let desksPerRow = 10;
  if (roomId === "308") desksPerRow = 6;

  let rowMap = {};
  deskItems.forEach((desk) => {
    const row = Math.ceil(desk / desksPerRow);
    if (!rowMap[row]) rowMap[row] = [];
    rowMap[row].push(desk);
  });

  const sortedRows = Object.keys(rowMap).sort((a, b) => a - b);
  computerTableBody.innerHTML = sortedRows
    .map(
      (row) =>
        `<tr><td>‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà ${row}</td><td>${rowMap[row]
          .sort((a, b) => a - b)
          .join(", ")}</td></tr>`
    )
    .join("");
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô
async function fetchUserInfo() {
  try {
    const response = await fetch(`${API_URL}/auth/session`, {
      credentials: "include",
    });

    const userSession = await response.json();
    if (!userSession.data) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà");
      window.location.href = "login.html";
      return;
    }

    console.log("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å session:", userSession.data);

    // ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏•‡∏á input ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ key ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    document.getElementById("student-name").value =
      userSession.data.full_name || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
    document.getElementById("student-id").value =
      userSession.data.student_id || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
    document.getElementById("stud-year").value =
      userSession.data.study_year || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
    document.getElementById("phone-number").value =
      userSession.data.phone_number || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ backend ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏°‡∏≤
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:", error);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°-‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
function addRow() {
  const tableBody = document.getElementById("members-table-body");
  const newRow = document.createElement("tr");
  newRow.innerHTML = `
    <td style="position: relative;">
      <input type="text" class="form-control student-id-input" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏¥‡∏™‡∏¥‡∏ï" pattern="\\d*" title="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç">
      <div class="dropdown-list"></div>
    </td>
    <td><input type="text" class="form-control student-name-input" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•" readonly></td>
    <td><button type="button" class="btn btn-danger" onclick="deleteRow(this)">‡∏•‡∏ö</button></td>
  `;
  tableBody.appendChild(newRow);

  const input = newRow.querySelector(".student-id-input");
  initializeStudentIDInput(input); // ‡πÄ‡∏õ‡∏¥‡∏î dropdown ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
}

function deleteRow(button) {
  const row = button.closest("tr");
  row.remove();
}

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡πÄ‡∏û‡∏∑‡πà‡∏≠ filter
let studentData = [];
async function fetchStudentData() {
  try {
    const response = await fetch(`${API_URL}/booker/data/student`);

    // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ URL ‡πÄ‡∏õ‡πá‡∏ô /data/student
    // ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô URL ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏£‡πâ‡∏≤‡∏á
    if (!response.ok) throw new Error("HTTP error " + response.status);

    studentData = await response.json();
    console.log("‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", studentData);
  } catch (error) {
    console.error("‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", error);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô filter ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏¥‡∏™‡∏¥‡∏ï
function filterStudentList(inputElement) {
  let value = inputElement.value.trim();
  let dropdown = inputElement.nextElementSibling;
  let row = inputElement.closest("tr");
  let nameInput = row.querySelector(".student-name-input");

  dropdown.innerHTML = "";
  dropdown.style.display = "none";
  if (value === "") return;

  // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  const usedIds = Array.from(document.querySelectorAll(".student-id-input"))
    .filter((input) => input !== inputElement) // ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏¢‡∏π‡πà
    .map((input) => input.value.trim())
    .filter((id) => id !== "");

  // ‚úÖ ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å studentData
  let filtered = studentData.filter(
    (student) =>
      student.student_id.startsWith(value) &&
      !usedIds.includes(student.student_id)
  );

  if (filtered.length === 0) return;

  dropdown.style.display = "block";
  filtered.forEach((student) => {
    let option = document.createElement("div");
    option.classList.add("dropdown-item");
    option.style.padding = "5px";
    option.innerHTML = `<span style="font-size: 16px;">${student.student_id} - ${student.full_name}</span>`;

    option.addEventListener("mouseover", () => {
      option.style.fontWeight = "bold";
      option.style.backgroundColor = "#f0f0f0";
    });
    option.addEventListener("mouseout", () => {
      option.style.fontWeight = "normal";
      option.style.backgroundColor = "#fff";
    });

    option.addEventListener("click", () => {
      inputElement.value = student.student_id;
      nameInput.value = student.full_name;
      dropdown.style.display = "none";
    });

    dropdown.appendChild(option);
  });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£ filter ‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏≠‡∏á student-id
function initializeStudentIDInput(inputElement) {
  let dropdown = inputElement.nextElementSibling;
  inputElement.addEventListener("input", function () {
    filterStudentList(inputElement);
  });
  inputElement.addEventListener("blur", () => {
    setTimeout(() => (dropdown.style.display = "none"), 200);
  });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
let isEquipmentLoaded = false;
async function fetchEquipmentInfo() {
  if (isEquipmentLoaded) {
    console.log("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î‡∏ã‡πâ‡∏≥");
    return;
  }
  isEquipmentLoaded = true;
  console.log("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå...");

  const params = new URLSearchParams(window.location.search);
  let equipmentData = params.get("equipments");

  if (!equipmentData) {
    console.warn("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡πà‡∏≤ `equipments` ‡πÉ‡∏ô URL");
    return;
  }

  const decodedEquipmentData = decodeURIComponent(equipmentData).replace(
    /%2C/g,
    ","
  );
  console.log("üìå ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å URL:", decodedEquipmentData);

  const equipmentDetails = decodedEquipmentData
    .split(",")
    .map((item) => {
      const parts = item.split(":");
      if (parts.length !== 2) return null;
      return {
        id: parts[0].trim(),
        amount: parts[1].trim(),
      };
    })
    .filter((item) => item !== null);

  if (equipmentDetails.length === 0) {
    console.warn("‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• `equipments` ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    return;
  }

  console.log("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å URL:", equipmentDetails);

  try {
    const response = await fetch(`${API_URL}/booker/getEquipmentInformation`);
    if (!response.ok) throw new Error(`HTTP error ${response.status}`);
    const equipmentList = await response.json();

    if (!Array.isArray(equipmentList) || equipmentList.length === 0) {
      console.warn("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
      return;
    }

    console.log("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", equipmentList);

    const tableBody = document.getElementById("equipment-table-body");
    tableBody.innerHTML = ""; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô

    equipmentDetails.forEach((equip) => {
      const equipmentInfo = equipmentList.find(
        (e) => String(e.equipment_id) === equip.id
      );
      if (!equipmentInfo) return;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ row ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
      if (
        !document.querySelector(
          `#equipment-table-body tr[data-id='${equip.id}']`
        )
      ) {
        const row = document.createElement("tr");
        row.setAttribute("data-id", equip.id);
        row.innerHTML = `

            <td>${equipmentInfo.equipment_name}</td>
            <td>SC2-${params.get("room")}</td>
            <td>${equip.amount}</td>
          `;
        console.log(
          "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:",
          equipmentInfo.equipment_name,
          "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:",
          equip.amount
        );
        tableBody.appendChild(row);
      } else {
        console.log("‚ö†Ô∏è ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß:", equipmentInfo.equipment_name);
      }
    });
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:", error);
  }
}

async function loadEquipmentDetails() {
  if (isEquipmentLoaded) {
    console.log("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î‡∏ã‡πâ‡∏≥");
    return;
  }
  console.log("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå...");
  isEquipmentLoaded = true;

  // ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÑ‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å fetchEquipmentInfo() ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏á‡∏Å‡πá‡πÑ‡∏î‡πâ
  await fetchEquipmentInfo();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ DOM ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß
document.addEventListener("DOMContentLoaded", async function () {
  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  await fetchUserInfo();
  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö filter
  await fetchStudentData();
  // ‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
  await fetchEquipmentInfo();
  await loadEquipmentDetails();

  // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏Ø
  const params = new URLSearchParams(window.location.search);
  const roomParam = params.get("room");
  const startTimeParam = params.get("startTime");
  const endTimeParam = params.get("endTime");
  const desksParam = params.get("desks");

  // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡πâ‡∏≠‡∏á
  if (roomParam) {
    loadRoomDetails(roomParam);
  }

  // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤
  if (startTimeParam && endTimeParam) {
    const formattedStartTime = formatTimeForDisplay(startTimeParam);
    const formattedEndTime = formatTimeForDisplay(endTimeParam);
    document.getElementById(
      "time-range-info"
    ).textContent = `${formattedStartTime}-${formattedEndTime} ‡∏ô.`;
  } else {
    document.getElementById("time-range-info").textContent = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤";
  }

  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå
  displaySelectedComputers(desksParam);

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö student-id-input
  document.querySelectorAll(".student-id-input").forEach((inputElement) => {
    initializeStudentIDInput(inputElement);
  });

  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏´‡∏≤‡∏¢ ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏ã‡πâ‡∏≥‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
  setTimeout(async () => {
    console.log("üîÑ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ã‡πâ‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏≤‡∏¢");
    await fetchEquipmentInfo();
  }, 2000);
});

async function submitBookingOut() {
  const studentId = document.getElementById("student-id").value;
  const urlParams = new URLSearchParams(window.location.search);
  const roomId = urlParams.get("room");
  const usedDate = urlParams.get("date");
  const startTime = urlParams.get("startTime");
  const endTime = urlParams.get("endTime");
  const desks = urlParams.get("desks")
    ? urlParams.get("desks").split(",").map(Number)
    : [];
  const equipments = urlParams.get("equipments") || "";
  const reasonElement = document.querySelector("select[name='usage']");
  const reason = reasonElement ? reasonElement.value.trim() : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
  const detail_request_reason =
    document.getElementById("additional-details").value || null;
  const requestType = "‡∏ô‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤";

  const memberInputs = document.querySelectorAll(".student-id-input");
  const members = Array.from(memberInputs)
    .map((input) => input.value.trim())
    .filter((id) => id !== "" && id !== studentId);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  if (!studentId || !roomId || !usedDate || !startTime || !endTime || !reason) {
    alert("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö");
    return;
  }

  // üîΩ ‡πÅ‡∏™‡∏î‡∏á SweetAlert ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const roomType = document.getElementById("room-type-info").textContent;
  const roomName = document.getElementById("room-info").textContent;
  const timeRange = document.getElementById("time-range-info").textContent;
  const formattedDate = usedDate; // ‡πÅ‡∏™‡∏î‡∏á yyyy-mm-dd ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏†‡∏≤‡∏û

  const confirmResult = await Swal.fire({
    title: "<strong>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</strong>",
    icon: "warning",
    html: `
  <div style="font-size: 16px; text-align: center;">
    <b>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á:</b> ${formattedDate}<br>
    <b>‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á:</b> ${timeRange}<br>
    <b>‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á:</b> ${roomName} (${roomType})<br><br>
    <span style="color: red;">‡∏´‡∏≤‡∏Å‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ</span>
  </div>
`,
    showCancelButton: true,
    confirmButtonText: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
    cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    confirmButtonColor: "#673ab7",
    cancelButtonColor: "#616161",
    reverseButtons: false,
  });

  if (!confirmResult.isConfirmed) return;

  // üîΩ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡πÑ‡∏õ API
  const bookingData = {
    room_id: roomId,
    used_date: usedDate,
    student_id: studentId,
    start_time: startTime,
    end_time: endTime,
    desks: desks,
    equipments: equipments,
    request_type: requestType,
    request_reason: reason,
    detail_request_reason: detail_request_reason,
    members: members,
  };

  console.log("üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ API:", bookingData);

  try {
    const response = await fetch(`${API_URL}/booker/submitBookingOuttime`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      credentials: "include",
      body: JSON.stringify(bookingData),
    });

    const result = await response.json();
    console.log("üìå ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å API:", result);

    if (response.ok) {
      await Swal.fire({
        icon: "success",
        title: "‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        text: "‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
      });
      window.location.href = "home.html";
    } else {
      Swal.fire("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", result.error || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ", "error");
    }
  } catch (err) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", err);
    Swal.fire("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ", "error");
  }
}
