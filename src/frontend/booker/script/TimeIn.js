// WebSocket connection
const socket = io(`${API_URL}`);
socket.on("connect", () => {
  console.log("WebSocket connected on TimeIn.html");
});
socket.on("booking_update", (data) => {
  console.log("Received booking update via WebSocket:", data);
});

async function fetchUserInfo() {
  try {
    const response = await fetch(`${API_URL}/auth/session`, {
      credentials: "include",
    });

    const userSession = await response.json();
    if (!userSession.data) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà");
      window.location.href = "../../index.html";
      return;
    }

    console.log("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å session:", userSession.data);

    // ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏•‡∏á input ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ key ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    document.getElementById("student-name").value =
      userSession.data.full_name || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
    document.getElementById("student-id").value =
      userSession.data.user_id || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
    document.getElementById("stud-year").value =
      userSession.data.study_year || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
    document.getElementById("phone-number").value =
      userSession.data.phone_number || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ backend ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏°‡∏≤
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:", error);
  }
}

// Utility function: Format time from "08:00:00" to "8.00"
function formatTimeForDisplay(timeStr) {
  const parts = timeStr.split(":");
  let hour = parts[0];
  const minute = parts[1];
  if (hour.startsWith("0")) {
    hour = hour.substring(1);
  }
  return hour + "." + minute;
}
// Load equipment mapping from API /getEquipmentInformation
async function loadEquipmentMapping() {
  let equipmentMapping = {};
  try {
    const response = await fetch(`${API_URL}/booker/getEquipmentInformation`);
    if (!response.ok) throw new Error("HTTP error " + response.status);

    const equipData = await response.json();
    console.log("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å API:", equipData);

    // ‡πÅ‡∏°‡∏õ‡∏Ñ‡πà‡∏≤ equipment_id -> equipment_name
    equipData.forEach((item) => {
      equipmentMapping[item.equipment_id] = item.equipment_name;
    });
  } catch (err) {
    console.error("‚ùå Error fetching equipment information:", err);
  }
  return equipmentMapping;
}

// Load room details from API /roomdetail
async function loadRoomDetails(roomId) {
  try {
    const response = await fetch(`${API_URL}/booker/roomdetail`);
    if (!response.ok) throw new Error("HTTP error " + response.status);
    const rooms = await response.json();

    // ‡∏´‡∏≤ room ‡∏ó‡∏µ‡πà room_id ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö roomParam
    const roomDetail = rooms.find((room) => room.room_id == roomId);
    console.log("‚úÖ Room Detail:", roomDetail);

    if (roomDetail) {
      document.getElementById("room-info").textContent =
        roomDetail.room_name || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
      document.getElementById("room-type-info").textContent =
        roomDetail.room_type || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
    } else {
      document.getElementById("room-info").textContent = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
      document.getElementById("room-type-info").textContent = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
    }
  } catch (err) {
    console.error("Error fetching room details:", err);
    document.getElementById("room-info").textContent = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
    document.getElementById("room-type-info").textContent = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
  }
}

function displaySelectedComputers() {
  const urlParams = new URLSearchParams(window.location.search);
  const desksParam = urlParams.get("desks");
  const roomId = urlParams.get("room");
  const computerTableBody = document.getElementById("computer-table-body");

  if (!desksParam) {
    computerTableBody.innerHTML = `<tr><td colspan="2">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå</td></tr>`;
    return;
  }

  const deskItems = desksParam.split(",").map((d) => parseInt(d.trim(), 10));

  // ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß‡∏•‡∏∞ 10 ‡∏ï‡∏±‡∏ß (‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á)
  let desksPerRow = 10;
  if (roomId === "308") desksPerRow = 6;

  let rowMap = {};
  deskItems.forEach((desk) => {
    const row = Math.ceil(desk / desksPerRow);
    if (!rowMap[row]) rowMap[row] = [];
    rowMap[row].push(desk);
  });

  const sortedRows = Object.keys(rowMap).sort((a, b) => a - b);
  computerTableBody.innerHTML = sortedRows
    .map(
      (row) =>
        `<tr><td>‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà ${row}</td><td>${rowMap[row]
          .sort((a, b) => a - b)
          .join(", ")}</td></tr>`
    )
    .join("");
}

// Main initialization

async function loadEquipmentDetails() {
  console.log("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå...");

  // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å URL
  const urlParams = new URLSearchParams(window.location.search);
  const equipmentsParam = urlParams.get("equipments"); // ‡πÄ‡∏ä‡πà‡∏ô "12:1,13:2"

  console.log("üìå Equipments Param:", equipmentsParam);

  if (!equipmentsParam) {
    console.warn("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å URL");
    return;
  }

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å API
  const equipmentMapping = await loadEquipmentMapping();

  let equipmentTableRows = "";
  const equipmentItems = equipmentsParam.split(",");

  equipmentItems.forEach((item) => {
    const [id, amount] = item.split(":");
    const name = equipmentMapping[id] || `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (${id})`;
    equipmentTableRows += `<tr>
    <td>${name}</td>
    <td>${amount}</td>
    </tr>`;
  });

  console.log("‚úÖ ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", equipmentTableRows);

  document.getElementById("equipment-table-body").innerHTML =
    equipmentTableRows;
}
document.addEventListener("DOMContentLoaded", async function () {
  await loadEquipmentDetails();
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö toggle sidebar
function toggleSidebar() {
  const sidebar = document.getElementById("sidebar");
  const overlay = document.getElementById("overlay");
  sidebar.classList.toggle("active");
  overlay.classList.toggle("active");
}

async function submitBookingA() {
  const urlParams = new URLSearchParams(window.location.search);
  const room_id = urlParams.get("room");
  const used_date = urlParams.get("date");
  const start_time = urlParams.get("startTime");
  const end_time = urlParams.get("endTime");

  const request_type = window.location.pathname.includes("TimeOut")
    ? "‡∏ô‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤"
    : "‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤";
  const request_reason = document.querySelector("select[name='usage']").value;
  const detail_request_reason =
    document.getElementById("additional-details").value || null;

  const desks = urlParams.get("desks")
    ? urlParams.get("desks").split(",").map(Number)
    : [];
  const equipments = urlParams.get("equipments") || "";

  const student_name = document.getElementById("student-name")?.value || null;
  const phone_number = document.getElementById("phone-number")?.value || null;

  if (!room_id || !used_date || !start_time || !end_time || !request_reason) {
    Swal.fire("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö", "warning");
    return;
  }

  const roomText =
    document.getElementById("room-info")?.textContent || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
  const roomType =
    document.getElementById("room-type-info")?.textContent || "-";
  const timeRange = `${formatTimeForDisplay(
    start_time
  )} - ${formatTimeForDisplay(end_time)} ‡∏ô.`;

  const confirmResult = await Swal.fire({
    title: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á",
    html: `
    <strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á:</strong> ${used_date}<br/>
    <strong>‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á:</strong> ${timeRange}<br/>
    <strong>‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á:</strong> ${roomText} (${roomType})<br/>
    <div style="color:red; margin-top:10px;">
    ‡∏´‡∏≤‡∏Å‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ
    </div>
  `,
    icon: "warning",
    showCancelButton: true,
    confirmButtonText: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
    cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
  });

  if (!confirmResult.isConfirmed) return;

  try {
    const response = await fetch(`${API_URL}/booker/submitBookingIntime`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      credentials: "include",
      body: JSON.stringify({
        room_id,
        used_date,
        start_time,
        end_time,
        request_type,
        request_reason,
        detail_request_reason,
        desks,
        equipments,
        student_name,
        phone_number,
      }),
    });

    const result = await response.json();
    if (result.success) {
      Swal.fire("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", "success").then(() => {
        window.location.href = "../home.html";
      });
    } else {
      Swal.fire(
        "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        result.error || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ",
        "error"
      );
    }
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
    Swal.fire("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö", "error");
  }
}

document.addEventListener("DOMContentLoaded", async () => {
  fetchUserInfo();
  // ‡∏î‡∏∂‡∏á query parameters ‡∏à‡∏≤‡∏Å URL
  const urlParams = new URLSearchParams(window.location.search);
  const dateParam = urlParams.get("date"); // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: yyyy-mm-dd
  const roomParam = urlParams.get("room"); // ‡πÄ‡∏ä‡πà‡∏ô "307"
  const startTimeParam = urlParams.get("startTime"); // ‡πÄ‡∏ä‡πà‡∏ô "08:00:00"
  const endTimeParam = urlParams.get("endTime"); // ‡πÄ‡∏ä‡πà‡∏ô "17:00:00"
  const desksParam = urlParams.get("desks"); // ‡πÄ‡∏ä‡πà‡∏ô "27,26,16"
  const equipmentsParam = urlParams.get("equipments"); // ‡πÄ‡∏ä‡πà‡∏ô "12:1,13:1,14:1,15:1"
  console.log("üìå Room Param from URL:", roomParam);
  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
  document.getElementById("date-info").textContent = dateParam;
  await loadRoomDetails(roomParam);
  displaySelectedComputers(desksParam);
  const formattedStartTime = formatTimeForDisplay(startTimeParam);
  const formattedEndTime = formatTimeForDisplay(endTimeParam);
  document.getElementById(
    "time-range-info"
  ).textContent = `${formattedStartTime}-${formattedEndTime} ‡∏ô.`;
  //document.getElementById("desks-info").textContent = desksParam;

  // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô URL
  if (dateParam) {
    const dateObj = new Date(dateParam);
    const daysArr = [
      "‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå",
      "‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå",
      "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£",
      "‡∏û‡∏∏‡∏ò",
      "‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ",
      "‡∏®‡∏∏‡∏Å‡∏£‡πå",
      "‡πÄ‡∏™‡∏≤‡∏£‡πå",
    ];
    const dayName = daysArr[dateObj.getDay()];
    // document.getElementById("day-name").textContent = dayName;
  }

  // ‡∏î‡∏∂‡∏á equipment mapping ‡∏à‡∏≤‡∏Å API
  const equipmentMapping = await loadEquipmentMapping();
  let equipmentTableRows = "";
  if (equipmentsParam) {
    const equipmentItems = equipmentsParam.split(",");
    equipmentItems.forEach((item) => {
      const [id, amount] = item.split(":");
      const name = equipmentMapping[id] || id;
      equipmentTableRows += `<tr>
          <td>${name}</td>
          <td>${amount}</td>
        </tr>`;
    });
  }
  document.getElementById("equipment-table-body").innerHTML =
    equipmentTableRows;

  // Debug logging
  console.log("Received parameters:");
  console.log("Date:", dateParam);
  console.log("Start Time:", startTimeParam);
  console.log("End Time:", endTimeParam);
  console.log("Desks:", desksParam);
  console.log("Equipments (raw):", equipmentsParam);
  console.log("Equipment mapping:", equipmentMapping);
  console.log("Equipments (mapped HTML):", equipmentTableRows);
});
