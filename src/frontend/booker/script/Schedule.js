/********************************
 * 1) ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ days, timeSlots
 ********************************/
const days = [
  "‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå",
  "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£",
  "‡∏û‡∏∏‡∏ò",
  "‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ",
  "‡∏®‡∏∏‡∏Å‡∏£‡πå",
  "‡πÄ‡∏™‡∏≤‡∏£‡πå",
  "‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå",
];

const timeSlots = [
  "08:00:00",
  "09:00:00",
  "10:00:00",
  "11:00:00",
  "12:00:00",
  "13:00:00",
  "14:00:00",
  "15:00:00",
  "16:00:00",
  "17:00:00",
  "18:00:00",
  "19:00:00",
  "20:00:00",
];

/********************************
 * Global: ‡∏≠‡πà‡∏≤‡∏ô room_id ‡∏à‡∏≤‡∏Å URL
 ********************************/
const urlParams = new URLSearchParams(window.location.search);
const roomId = urlParams.get("room");
if (!roomId) {
  console.error("No room specified in URL!");
}

/********************************
 * Helper: formatTime(timeStr)
 * - ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å string (‡∏´‡∏£‡∏∑‡∏≠ ISO string) ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ "HH:MM:SS"
 ********************************/
function formatTime(timeStr) {
  if (!timeStr) return null;
  if (timeStr.includes("T")) {
    const date = new Date(timeStr);
    return date.toTimeString().slice(0, 8);
  }
  return timeStr;
}

/********************************
 * Helper: getISODate(date)
 * - ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "YYYY-MM-DD"
 ********************************/
function getISODate(date) {
  const yyyy = date.getFullYear();
  const mm = (date.getMonth() + 1).toString().padStart(2, "0");
  const dd = date.getDate().toString().padStart(2, "0");
  return `${yyyy}-${mm}-${dd}`;
}

/********************************
 * 2) getStartOfWeek(date)
 *    - ‡∏´‡∏≤ "‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå" ‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
 ********************************/
function getStartOfWeek(date) {
  const selectedDate = new Date(date);
  const dayOfWeek = selectedDate.getDay(); // 0 = ‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå, 1 = ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå, ...
  const startOfWeek = new Date(selectedDate);
  startOfWeek.setDate(
    selectedDate.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1)
  );
  return startOfWeek;
}

/********************************
 * 3) getFormattedDate(date)
 *    - ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô dd/mm/yyyy (‡∏õ‡∏µ‡∏û.‡∏®.)
 ********************************/
function getFormattedDate(date) {
  const dayOfMonth = date.getDate().toString().padStart(2, "0");
  const month = (date.getMonth() + 1).toString().padStart(2, "0");
  const year = date.getFullYear() + 543;
  return `${dayOfMonth}/${month}/${year}`;
}

/********************************
 * 4) addOneHour(time)
 *    - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤ 1 ‡∏ä‡∏°. (HH:MM:SS)
 ********************************/
function addOneHour(time) {
  const timePattern = /^\d{2}:\d{2}:\d{2}$/;
  if (!timePattern.test(time)) {
    throw new Error("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô HH:MM:SS");
  }
  const [hour, minute, second] = time.split(":").map(Number);
  const date = new Date();
  date.setHours(hour, minute, second);
  date.setHours(date.getHours() + 1);
  return date.toTimeString().slice(0, 8);
}

/********************************
 * 5) showAlert(message)
 *    - popup ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô 3 ‡∏ß‡∏¥
 ********************************/
function showAlert(message) {
  const alertDiv = document.createElement("div");
  alertDiv.style.position = "fixed";
  alertDiv.style.top = "20px";
  alertDiv.style.left = "50%";
  alertDiv.style.transform = "translateX(-50%)";
  alertDiv.style.backgroundColor = "#f44336";
  alertDiv.style.color = "white";
  alertDiv.style.padding = "10px 20px";
  alertDiv.style.fontSize = "16px";
  alertDiv.style.borderRadius = "5px";
  alertDiv.textContent = message;

  document.body.appendChild(alertDiv);
  setTimeout(() => alertDiv.remove(), 3000);
}

/********************************
 * 6) fetchSchedule()
 *    - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô <tbody>
 ********************************/
async function fetchSchedule(selectedDate) {
  try {
    const startOfWeek = getStartOfWeek(new Date(selectedDate));

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const response = await fetch(`${API_URL}/booker/getSchedule`);
    const data = await response.json();
    // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ schedule ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö room_id ‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏°‡∏≤‡∏à‡∏≤‡∏Å URL
    const roomSchedules = data.filter((d) => d.room_id === roomId);

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á room ‡∏ô‡∏±‡πâ‡∏ô
    const bookingResponse = await fetch(`${API_URL}/booker/room_request`);
    let bookings = await bookingResponse.json();
    bookings = bookings.filter(
      (b) => b.request_status === "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥" && b.room_id === roomId
    );

    console.log("üìå ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (Room " + roomId + "):", roomSchedules);
    console.log("üìå ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á (Room " + roomId + "):", bookings);

    const tbody = document.querySelector("tbody");
    if (!tbody) {
      console.error("‡πÑ‡∏°‡πà‡∏û‡∏ö <tbody> ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á");
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const today = new Date();
    const todayISO = getISODate(today);

    tbody.innerHTML = days
      .map((day, index) => {
        let currentDate = new Date(startOfWeek);
        currentDate.setDate(startOfWeek.getDate() + index);
        const formattedDate = getFormattedDate(currentDate);
        const rowISO = getISODate(currentDate);

        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const isToday = todayISO === rowISO;

        // ‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á schedule entries ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô:
        const applicableSchedules = roomSchedules.filter((entry) => {
          if (entry.schedule_date) {
            return getISODate(new Date(entry.schedule_date)) === rowISO;
          } else {
            return entry.week_day?.trim() === day;
          }
        });

        return `
        <tr ${isToday ? 'class="highlight"' : ""}>
          <td data-day="${index}">
            ${day} (${formattedDate})
            ${isToday ? '<span class="today-indicator">‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</span>' : ""}
          </td>
          ${timeSlots
            .map((slot) => {
              // ‡∏´‡∏≤ entry ‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô cell ‡∏ô‡∏µ‡πâ
              const matchingEntry = applicableSchedules.find((entry) => {
                // ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô database ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô HH:MM:SS)
                return slot >= entry.start_time && slot < entry.end_time;
              });
              let cellClass = "available";
              let cellContent = "";
              if (matchingEntry) {
                const status = matchingEntry.room_status;
                if (status === "‡∏°‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô") {
                  cellClass = "class-time";
                  cellContent = "‡∏°‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô";
                } else if (status === "‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á") {
                  cellClass = "not-available";
                  cellContent = "‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á";
                } else if (status === "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á") {
                  cellClass = "maintenance-time";
                  cellContent = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á";
                }
              }
              // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ‡∏ñ‡πâ‡∏≤ cell ‡∏¢‡∏±‡∏á available
              if (cellClass === "available") {
                const isBooked = bookings.some((b) => {
                  const bookingISO = getISODate(new Date(b.used_date));
                  if (bookingISO !== rowISO) return false;
                  return slot >= b.start_time && slot < b.end_time;
                });
                if (isBooked) {
                  cellClass = "booked-time";
                  cellContent = "‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß";
                }
              }
              // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ cell ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô available ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
              const canSelect = rowISO >= todayISO && cellClass === "available";
              return `<td class="${cellClass}" ${
                canSelect ? 'onclick="toggleSelection(this)"' : ""
              }>${cellContent}</td>`;
            })
            .join("")}
        </tr>
      `;
      })
      .join("");
  } catch (error) {
    console.error("‚ùå Error fetching schedule:", error);
  }
}

/********************************
 * 7) updateTableForSelectedDate(date)
 *    - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÅ‡∏•‡πâ‡∏ß‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 ********************************/
async function updateTableForSelectedDate(date) {
  const selectedDate = new Date(date);
  const startOfWeek = getStartOfWeek(selectedDate);
  const tbody = document.querySelector("tbody");
  if (!tbody) return;

  // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó datePicker ‡∏î‡πâ‡∏ß‡∏¢
  document.getElementById("date-picker").value = getISODate(selectedDate);

  tbody.innerHTML = days
    .map((day, index) => {
      let currentDate = new Date(startOfWeek);
      currentDate.setDate(startOfWeek.getDate() + index);
      const formattedDate = getFormattedDate(currentDate);
      const isWeekend = index === 5 || index === 6; // ‡πÄ‡∏™‡∏≤‡∏£‡πå (5), ‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå (6)

      console.log(
        `üîç Checking: ${day} (${formattedDate}) -> isWeekend: ${isWeekend}`
      );

      return `
      <tr>
        <td data-day="${index}" class="${isWeekend ? "disabled" : ""}">
          ${day} (${formattedDate})
        </td>
        ${timeSlots
          .map(
            () =>
              `<td class="available" ${
                isWeekend
                  ? 'style="background-color: #f0f0f0; cursor: not-allowed;"'
                  : ""
              }></td>`
          )
          .join("")}
      </tr>
    `;
    })
    .join("");

  await fetchSchedule(date);
}

/********************************
 * 8) toggleSelection(cell)
 *    - ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å cell ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (available cells ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
 ********************************/
let selectedDayIndex = null; // ‡πÄ‡∏Å‡πá‡∏ö index ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
let selectedTimeIndexes = []; // ‡πÄ‡∏Å‡πá‡∏ö index ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å

function toggleSelection(cell) {
  if (!cell.classList.contains("available")) {
    showAlert("‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á!");
    return;
  }

  const row = cell.parentElement;
  const dayCell = row.querySelector("td");
  const dayIndex = parseInt(dayCell.dataset.day);
  const cellIndex = Array.from(row.children).indexOf(cell);

  // ‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå-‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå
  if (dayIndex === 5 || dayIndex === 6) {
    showAlert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå-‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡πÑ‡∏î‡πâ!");
    return;
  }

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ß‡∏±‡∏ô
  if (selectedDayIndex === null) {
    selectedDayIndex = dayIndex;
  }

  if (dayIndex !== selectedDayIndex) {
    showAlert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡πÑ‡∏î‡πâ!");
    return;
  }

  const alreadySelected = cell.classList.contains("checked");

  if (!alreadySelected) {
    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
    if (selectedTimeIndexes.length === 0) {
      selectedTimeIndexes.push(cellIndex);
    } else {
      // ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ä‡πà‡∏≠‡∏á
      const isAdjacent = selectedTimeIndexes.some(
        (index) => Math.abs(cellIndex - index) === 1
      );
      if (!isAdjacent) {
        showAlert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!");
        return;
      }
      selectedTimeIndexes.push(cellIndex);
    }

    cell.classList.add("checked");
    cell.innerHTML = '<i class="fas fa-check"></i>';
  } else {
    // ‚úÖ ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‚Üí ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏±‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    selectedTimeIndexes.sort((a, b) => a - b);
    const min = selectedTimeIndexes[0];
    const max = selectedTimeIndexes[selectedTimeIndexes.length - 1];

    if (cellIndex !== min && cellIndex !== max) {
      showAlert("‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏£‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!");
      return;
    }

    // ‡πÄ‡∏≠‡∏≤‡∏≠‡∏≠‡∏Å
    selectedTimeIndexes = selectedTimeIndexes.filter(
      (index) => index !== cellIndex
    );
    cell.classList.remove("checked");
    cell.innerHTML = "";

    if (selectedTimeIndexes.length === 0) {
      selectedDayIndex = null;
    }
  }
}

/********************************
 * 9) highlightDay(date)
 *    - ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ) ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
 ********************************/
function highlightDay(date) {
  // ‡∏•‡πâ‡∏≤‡∏á highlight ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô
  document.querySelectorAll("#schedule-table tbody tr").forEach((row) => {
    row.classList.remove("highlight");
  });

  // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ" indicator ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  document.querySelectorAll(".today-indicator").forEach((el) => {
    el.remove();
  });

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ)
  const today = new Date();
  const todayISO = getISODate(today);

  // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ô‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô
  const selectedDate = new Date(date);

  // ‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß)
  const startOfWeek = getStartOfWeek(selectedDate);

  // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  document.querySelectorAll("#schedule-table tbody tr").forEach((row) => {
    const dayCell = row.querySelector("td");
    if (!dayCell) return;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const dayIndex = parseInt(dayCell.dataset.day);
    if (dayIndex === 5 || dayIndex === 6) {
      dayCell.classList.add("disabled"); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î
    }

    // ‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏ß‡∏ô‡∏µ‡πâ
    const rowDate = new Date(startOfWeek);
    rowDate.setDate(startOfWeek.getDate() + dayIndex);
    const rowISO = getISODate(rowDate);

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ highlight ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á indicator "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"
    if (rowISO === todayISO) {
      row.classList.add("highlight");

      // ‡πÄ‡∏û‡∏¥‡πà‡∏° indicator "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"
      if (!dayCell.querySelector(".today-indicator")) {
        const indicator = document.createElement("span");
        indicator.className = "today-indicator";
        indicator.textContent = "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ";
        dayCell.appendChild(indicator);
      }
    }
  });
}

/********************************
 * 10) confirmBooking()
 *    - ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô" ‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô ‡∏´‡πâ‡∏≠‡∏á ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°-‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≠
 ********************************/
let finalRedirectUrl;
async function confirmBooking() {
  const selectedCells = document.querySelectorAll("td.checked");
  if (selectedCells.length === 0) {
    showAlert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á!");
    return;
  }
  const rowSet = new Set();
  selectedCells.forEach((cell) => rowSet.add(cell.parentElement));
  if (rowSet.size > 1) {
    showAlert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡πâ‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡πÑ‡∏î‡πâ!");
    return;
  }
  const row = selectedCells[0].parentElement;
  const dayCell = row.querySelector("td");
  const text = dayCell.textContent.replace("‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", "").trim();
  const matched = text.match(/^(.*?)\s*\((\d{2}\/\d{2}\/\d{4})\)$/);
  let selectedDay, selectedDate;
  if (matched) {
    selectedDay = matched[1];
    const dateOnly = matched[2];
    const [d, m, y] = dateOnly.split("/");
    const yearInAD = parseInt(y) - 543;
    selectedDate = `${yearInAD}-${m}-${d}`;
  } else {
    console.error("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡πÑ‡∏ß‡πâ:", text);
    return;
  }
  let selectedIndexes = [];
  selectedCells.forEach((cell) => {
    const cellIndex = Array.from(row.children).indexOf(cell);
    selectedIndexes.push(cellIndex);
  });
  selectedIndexes.sort((a, b) => a - b);
  const startIndex = selectedIndexes[0];
  const endIndex = selectedIndexes[selectedIndexes.length - 1];
  const startTime = timeSlots[startIndex - 1] ?? timeSlots[startIndex]; // ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ startIndex = 0
  const endTime =
    endIndex < row.children.length - 1
      ? timeSlots[endIndex]
      : addOneHour(timeSlots[endIndex - 1]);
  console.log("üìÑ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏áüìÑ");
  console.log("Selected Day:", selectedDay);
  console.log("Selected Date:", selectedDate);
  console.log("Start Time:", startTime);
  console.log("End Time:", endTime);
  const urlParams = new URLSearchParams({
    date: selectedDate,
    room: roomId,
    startTime: startTime,
    endTime: endTime,
  });
  finalRedirectUrl = `desk_equipment.html?${urlParams.toString()}`;
  // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ä‡πá‡∏Ñ‡∏ã‡πâ‡∏≥
  try {
    const res = await fetch(`${API_URL}/booker/room_request`);
    const bookings = await res.json();

    const conflicts = bookings.filter((b) => {
      const dateObj = new Date(b.used_date);
      const bookingDate = `${dateObj.getFullYear()}-${String(
        dateObj.getMonth() + 1
      ).padStart(2, "0")}-${String(dateObj.getDate()).padStart(2, "0")}`;
      const selectedISO = new Date(selectedDate).toISOString().split("T")[0];

      // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏ß‡∏£‡πå‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô string HH:MM:SS
      const bStart = b.start_time?.substring(0, 8); // "18:00:00"
      const bEnd = b.end_time?.substring(0, 8);
      const myStart = startTime?.substring(0, 8);
      const myEnd = endTime?.substring(0, 8);

      // ‡πÅ‡∏õ‡∏•‡∏á room_id ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ù‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
      const sameRoom = String(b.room_id) === String(roomId);
      const sameDate = bookingDate === selectedISO;
      const overlap = isTimeOverlap(myStart, myEnd, bStart, bEnd);

      console.log("üü° ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö:", {
        bookingDate,
        selectedISO,
        bStart,
        bEnd,
        myStart,
        myEnd,
        sameRoom,
        sameDate,
        overlap,
      });

      return sameDate && sameRoom && overlap;
    });
    lastConflicts = conflicts;

    if (conflicts.length > 0) {
      showConflictModal(conflicts.length); // ‡∏°‡∏µ‡∏Ñ‡∏¥‡∏ß‡∏ã‡πâ‡∏≥ ‚Üí ‡πÅ‡∏™‡∏î‡∏á popup
    } else {
      window.location.href = finalRedirectUrl; // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏¥‡∏ß‡∏ã‡πâ‡∏≥ ‚Üí ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ desk ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    }
    return;
  } catch (err) {
    console.error("‚ùå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ã‡πâ‡∏≠‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
  }
}

/********************************
 * 11) DOMContentLoaded
 *    - ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ datePicker ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ, ‡∏Å‡∏≥‡∏´‡∏ô‡∏î min (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á)
 *    - ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á EventListener
 ********************************/
document.addEventListener("DOMContentLoaded", async function () {
  try {
    const currentDate = new Date();
    const year = currentDate.getFullYear();
    const month = (currentDate.getMonth() + 1).toString().padStart(2, "0");
    const day = currentDate.getDate().toString().padStart(2, "0");
    const formattedDate = `${year}-${month}-${day}`;
    const datePicker = document.getElementById("date-picker");
    datePicker.value = formattedDate;
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á ‡πÅ‡∏ï‡πà‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ
    datePicker.min = formattedDate;
    await updateTableForSelectedDate(formattedDate);
    highlightDay(formattedDate); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠ highlight ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏™‡∏°‡∏≠

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î EventListener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
    document
      .getElementById("schedule-back")
      .addEventListener("click", function () {
        window.location.href = `Floor${roomId.charAt(0)}.html`;
      });

    document.getElementById("schedule-back").style.cursor = "pointer";

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° EventListener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
    document
      .getElementById("prev-week-btn")
      .addEventListener("click", function (e) {
        e.preventDefault();
        navigateWeek(-1);
      });

    document
      .getElementById("next-week-btn")
      .addEventListener("click", function (e) {
        e.preventDefault();
        navigateWeek(1);
      });

    document
      .getElementById("current-week-btn")
      .addEventListener("click", function (e) {
        e.preventDefault();
        const today = new Date();
        updateTableForSelectedDate(today);
        highlightDay(today); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠ highlight ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏™‡∏°‡∏≠
      });
  } catch (error) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á:", error);
  }
  // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° room_id ‡∏à‡∏≤‡∏Å URL
  if (roomId) {
    document.getElementById("room-name").textContent = `‡∏´‡πâ‡∏≠‡∏á: SC2-${roomId}`;
    console.log(`Loading schedule for room SC2-${roomId}`);
  }
  document
    .getElementById("date-picker")
    .addEventListener("change", async (event) => {
      await updateTableForSelectedDate(event.target.value);
      highlightDay(event.target.value); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠ highlight ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏™‡∏°‡∏≠
    });
});

/********************************
 * 12) navigateWeek(direction)
 *    - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå (+1 ‡∏´‡∏£‡∏∑‡∏≠ -1)
 ********************************/
function navigateWeek(direction) {
  const datePicker = document.getElementById("date-picker");
  const currentDate = new Date(datePicker.value);

  // ‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  const startOfWeek = getStartOfWeek(currentDate);

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏î 7 ‡∏ß‡∏±‡∏ô (1 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå)
  startOfWeek.setDate(startOfWeek.getDate() + 7 * direction);

  // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  updateTableForSelectedDate(startOfWeek);

  // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å highlightDay ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á highlight ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏≤‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ
  highlightDay(startOfWeek);
}

/********************************
 * 13) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ô
 ********************************/
function isTimeOverlap(startA, endA, startB, endB) {
  return startA < endB && endA > startB;
}

let lastConflicts = []; // ‚¨ÖÔ∏è ‡πÄ‡∏Å‡πá‡∏ö conflicts ‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô popup

function showConflictModal(count) {
  if (count === 0) return; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ popup ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏¥‡∏ß

  const detailText = lastConflicts
    .map((b, i) => {
      const start = b.start_time?.substring(0, 5);
      const end = b.end_time?.substring(0, 5);
      return `‡∏Ñ‡∏¥‡∏ß ${i + 1}. ${start} - ${end}`;
    })
    .join("<br>");

  Swal.fire({
    icon: "warning",
    title: `‚ö†Ô∏è ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ã‡πâ‡∏≠‡∏ô ${count} ‡∏Ñ‡∏¥‡∏ß`,
    html: `<div style="text-align:center; font-size:16px;">${detailText}</div>‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`,
    showCancelButton: true,
    confirmButtonText: "‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ï‡πä‡∏∞",
    cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    confirmButtonColor: "#4CAF50",
    cancelButtonColor: "#f44336",
  }).then((result) => {
    if (result.isConfirmed) {
      window.location.href = finalRedirectUrl;
    }
  });
}

function closeModal() {
  document.getElementById("conflictModal").style.display = "none";
}

function proceedToDesk() {
  window.location.href = finalRedirectUrl;
}

/********************************
 * 14) WebSocket ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
 ********************************/
const socket = io(`${API_URL}`);
socket.on("connect", () => {
  console.log("WebSocket connected!");
});
socket.on("booking_update", fetchSchedule);
