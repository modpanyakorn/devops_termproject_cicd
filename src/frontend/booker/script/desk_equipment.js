/********************************
 * 1) ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏Å‡πâ‡∏≤‡∏≠‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
 ********************************/
let selectedDesks = new Set();

/********************************
 * 2) ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô loadDesks()
 *    - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å endpoint "computer_management"
 *    - ‡∏™‡∏£‡πâ‡∏≤‡∏á element ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πâ‡∏≤‡∏≠‡∏µ‡πâ‡πÉ‡∏ô grid ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ñ‡∏ß‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° checkbox ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ñ‡∏ß
 ********************************/

async function loadDesks() {
  try {
    const response = await fetch(`${API_URL}/booker/computer_management`);
    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }
    const desks = await response.json();

    // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ room ‡∏à‡∏≤‡∏Å URL parameter
    const urlParams = new URLSearchParams(window.location.search);
    const room = urlParams.get("room");
    console.log("Room:", room);

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    const filteredDesks = desks
      .filter((desk) => desk.room_id === room)
      .sort((a, b) => a.computer_id - b.computer_id);

    const deskGrid = document.getElementById("deskGrid");
    deskGrid.innerHTML = ""; // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏ï‡∏≤‡∏°‡∏´‡πâ‡∏≠‡∏á
    let pattern = [3, 4, 3];
    if (room === "308") {
      pattern = [2, 2, 2];
    }

    if (room === "408") {
      pattern = [5, 5];
    }

    let index = 0;
    let rowCount = 0;

    while (index < filteredDesks.length) {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á container ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß
      const rowDiv = document.createElement("div");
      rowDiv.classList.add("desk-row");

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á checkbox ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ñ‡∏ß
      const rowCheckbox = document.createElement("input");
      rowCheckbox.type = "checkbox";
      rowCheckbox.classList.add("row-select");
      let rowDeskElements = [];

      rowCheckbox.addEventListener("change", function () {
        rowDeskElements.forEach((deskElem) => {
          if (deskElem && !deskElem.classList.contains("damaged")) {
            if (
              rowCheckbox.checked &&
              !deskElem.classList.contains("selected")
            ) {
              deskElem.classList.add("selected");
              selectedDesks.add(deskElem.dataset.id);
            } else if (
              !rowCheckbox.checked &&
              deskElem.classList.contains("selected")
            ) {
              deskElem.classList.remove("selected");
              selectedDesks.delete(deskElem.dataset.id);
            }
          }
        });
      });

      rowDiv.appendChild(rowCheckbox);

      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏ô pattern
      pattern.forEach((segCount, segIndex) => {
        const segContainer = document.createElement("div");
        segContainer.classList.add("desk-segment");

        if (segIndex < pattern.length - 1) {
          segContainer.style.marginRight = "50px";
        }

        const segmentDesks = filteredDesks.slice(index, index + segCount);
        index += segCount;

        segmentDesks.forEach((desk) => {
          const deskDiv = document.createElement("div");
          deskDiv.classList.add("desk");
          deskDiv.dataset.room = desk.room_id;
          deskDiv.dataset.id = desk.computer_id;
          deskDiv.innerHTML = `<span class="computer-icon">üñ•Ô∏è</span><span class="computer-id">${desk.computer_id}</span>`;

          if (desk.computer_status === "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ") {
            deskDiv.classList.add("usable");
          } else {
            deskDiv.classList.add("damaged");
          }

          deskDiv.onclick = () => toggleDesk(deskDiv);

          segContainer.appendChild(deskDiv);
          rowDeskElements.push(deskDiv);
        });

        rowDiv.appendChild(segContainer);
      });

      deskGrid.appendChild(rowDiv);
      rowCount++;

      // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡πâ‡∏≠‡∏á 308 ‚Üí ‡πÄ‡∏ß‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏∏‡∏Å ‡πÜ 2 ‡πÅ‡∏ñ‡∏ß
      if (room === "308" && rowCount % 2 === 0) {
        const spacer = document.createElement("div");
        spacer.style.height = "60px"; // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        deskGrid.appendChild(spacer);
      }
    }

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ event listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö select all checkbox (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    const selectAllCheckbox = document.getElementById("selectAllCheckbox");
    selectAllCheckbox.addEventListener("change", function () {
      const allDesks = document.querySelectorAll(".desk");
      allDesks.forEach((deskElem) => {
        if (!deskElem.classList.contains("damaged")) {
          if (
            selectAllCheckbox.checked &&
            !deskElem.classList.contains("selected")
          ) {
            deskElem.classList.add("selected");
            selectedDesks.add(deskElem.dataset.id);
          } else if (
            !selectAllCheckbox.checked &&
            deskElem.classList.contains("selected")
          ) {
            deskElem.classList.remove("selected");
            selectedDesks.delete(deskElem.dataset.id);
          }
        }
      });
      // ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á row checkboxes‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á
      const rowCheckboxes = document.querySelectorAll(".row-select");
      rowCheckboxes.forEach((checkbox) => {
        checkbox.checked = selectAllCheckbox.checked;
      });
    });
  } catch (error) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", error);
  }
}

/********************************
 * 3) ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô toggleDesk(desk)
 *    - ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏Å‡πâ‡∏≤‡∏≠‡∏µ‡πâ ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 'damaged'
 *      ‡πÉ‡∏´‡πâ toggle ‡∏Ñ‡∏•‡∏≤‡∏™ "selected" ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï selectedDesks
 ********************************/
function toggleDesk(desk) {
  if (!desk.classList.contains("damaged")) {
    desk.classList.toggle("selected");
    const deskId = desk.dataset.id;

    if (desk.classList.contains("selected")) {
      selectedDesks.add(deskId);
    } else {
      selectedDesks.delete(deskId);
    }
  }
}

/********************************
 * 4) ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô loadEquipments()
 *    - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å endpoint /getEquipments?room=307
 *    - ‡∏™‡∏£‡πâ‡∏≤‡∏á element ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏ô container ‡∏ó‡∏µ‡πà‡∏°‡∏µ id "equipmentContainer"
 *    - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏î ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
 ********************************/
async function loadEquipments() {
  try {
    const urlParams = new URLSearchParams(window.location.search);
    const room = urlParams.get("room");
    const response = await fetch(
      `${API_URL}/booker/getEquipments?room=${room}`
    );
    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }
    const equipments = await response.json();
    const equipmentContainer = document.getElementById("equipmentContainer");
    equipmentContainer.innerHTML = ""; // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤

    equipments.forEach((equipment) => {
      const itemContainer = document.createElement("div");
      itemContainer.classList.add("borrow-item");

      const label = document.createElement("label");
      label.textContent = `${equipment.equipment_name} (‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${equipment.stock_quantity}):`;
      itemContainer.appendChild(label);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏î
      const minusBtn = document.createElement("button");
      minusBtn.textContent = "-";
      minusBtn.addEventListener("click", () => {
        let currentVal = parseInt(input.value);
        if (currentVal > 0) {
          input.value = currentVal - 1;
        }
      });
      itemContainer.appendChild(minusBtn);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á input ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏¢‡∏∑‡∏°
      const input = document.createElement("input");
      input.type = "number";
      input.min = "0";
      input.value = "0";
      input.max = equipment.stock_quantity;
      input.dataset.id = equipment.equipment_id;
      itemContainer.appendChild(input);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°
      const plusBtn = document.createElement("button");
      plusBtn.textContent = "+";
      plusBtn.addEventListener("click", () => {
        let currentVal = parseInt(input.value);
        if (currentVal < equipment.stock_quantity) {
          input.value = currentVal + 1;
        }
      });
      itemContainer.appendChild(plusBtn);

      equipmentContainer.appendChild(itemContainer);
    });
  } catch (error) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:", error);
  }
}

/********************************
 * 5) ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô submitSelection()
 *    - ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Å‡πâ‡∏≤‡∏≠‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏õ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô console
 ********************************/
async function submitSelection() {
  const selectedDeskArray = Array.from(selectedDesks);
  const equipmentInputs = document.querySelectorAll(".borrow-item input");
  const selectedEquipments = [];

  equipmentInputs.forEach((input) => {
    const value = parseInt(input.value);
    if (value > 0) {
      selectedEquipments.push({
        id: input.dataset.id,
        amount: value,
      });
    }
  });

  console.log("üìå ‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:", selectedDeskArray);
  console.log("üìå ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:", selectedEquipments);

  // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ startTime ‡∏à‡∏≤‡∏Å URL
  const urlParams = new URLSearchParams(window.location.search);
  const startTime = urlParams.get("startTime");
  const endTime = urlParams.get("endTime");
  const date = urlParams.get("date");
  const room = urlParams.get("room");

  if (!startTime) {
    alert("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡πà‡∏≤ startTime ‡πÉ‡∏ô URL!");
    return;
  }

  // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
  const hour = parseInt(startTime.split(":")[0], 10);

  // ‚úÖ ‡∏î‡∏∂‡∏á Role ‡∏à‡∏≤‡∏Å fetchUserInfo()
  const sessionResponse = await fetch(`${API_URL}/auth/session`, {
    method: "GET",
    credentials: "include",
  });

  if (!sessionResponse.ok) {
    alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà");
    window.location.href = "../../index.html";
    return;
  }

  const sessionData = await sessionResponse.json();
  const userRole = sessionData.role;
  console.log("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö userRole:", userRole);

  if (!userRole) {
    alert("‚õî ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà");
    return;
  }

  let targetPage = "";

  // ‡∏î‡∏∂‡∏á‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°-‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
  const hourStart = parseInt(startTime.split(":")[0], 10);
  const hourEnd = parseInt(endTime.split(":")[0], 10);

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏à‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const isOutOfTime =
    hourStart < 8 || hourStart > 17 || hourEnd < 8 || hourEnd > 17;

  if (userRole === "‡∏ô‡∏¥‡∏™‡∏¥‡∏ï") {
    if (isOutOfTime) {
      targetPage = "TimeOut.html";
    } else {
      targetPage = "./TimeIn.html";
    }
  } else if (userRole === "‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå") {
    if (isOutOfTime) {
      targetPage = "TimeOutTeacher.html";
    } else {
      targetPage = "TimeInTeacher.html";
    }
  } else {
    alert("‚õî ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ");
    return;
  }

  // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡πÉ‡∏´‡∏°‡πà
  const newUrlParams = new URLSearchParams({
    room: room,
    date: date,
    startTime: startTime,
    endTime: endTime,
    desks: selectedDeskArray.join(","),
    equipments: selectedEquipments.map((e) => `${e.id}:${e.amount}`).join(","),
  });

  console.log(
    "üîó ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà:",
    targetPage + "?" + newUrlParams.toString()
  );
  window.location.href = `${targetPage}?${newUrlParams.toString()}`;
}

/********************************
 * 6) ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
 ********************************/
document.addEventListener("DOMContentLoaded", () => {
  loadDesks();
  loadEquipments();

  const roomId = new URLSearchParams(window.location.search).get("room");

  if (roomId) {
    document.getElementById("room-name").textContent = `‡∏´‡πâ‡∏≠‡∏á: SC2-${roomId}`;
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Schedule
    document.getElementById("back-btn").href = `Schedule.html?room=${roomId}`;
    console.log(`Loading schedule for room SC2-${roomId}`);
  }
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
function checkTimePeriod() {
  const now = new Date();
  const hour = now.getHours();

  if (hour >= 8 && hour < 16) {
    return "‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤";
  } else if (hour >= 17 && hour <= 20) {
    return "‡∏ô‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤";
  } else {
    return "‚è≥ ‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏à‡∏≠‡∏á)";
  }
}
console.log("üìå ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏ß‡∏•‡∏≤:", checkTimePeriod());
