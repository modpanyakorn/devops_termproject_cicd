name: EasyRoom Deployment Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deployment_reason:
        description: "Reason for manual deployment"
        required: false
        default: "Manual deployment"

jobs:
  code-quality-check:
    name: üïµÔ∏è Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Check Project Structure
        run: |
          echo "Checking project structure..."
          test -f .env || (echo "‚ùå .env file missing" && exit 1)
          test -d src/frontend || (echo "‚ùå Frontend directory missing" && exit 1)
          test -d src/backend || (echo "‚ùå Backend directory missing" && exit 1)
          echo "‚úÖ Project structure validated"

  prepare-deployment:
    name: üì¶ Prepare Deployment Files
    needs: code-quality-check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Create Deployment Directory
        run: |
          mkdir -p deployment
          cp .env deployment/
          cp docker-compose.yml deployment/
          cp Dockerfile.frontend deployment/
          cp Dockerfile.backend deployment/
          cp wait-for-it.sh deployment/ || true

      - name: Upload Deployment Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: deployment-files
          path: deployment/

  build-frontend:
    name: üåê Build Frontend Image
    needs: code-quality-check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/easyroom-frontend:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/easyroom-frontend:${{ github.sha }}

  build-backend:
    name: üöÄ Build Backend Image
    needs: code-quality-check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.backend
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/easyroom-backend:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/easyroom-backend:${{ github.sha }}

  deploy-to-ec2:
    name: üñ•Ô∏è Deploy to EC2
    needs:
      - prepare-deployment
      - build-frontend
      - build-backend
    runs-on: ubuntu-latest
    steps:
      - name: Download Deployment Artifacts
        uses: actions/download-artifact@v3
        with:
          name: deployment-files
          path: deployment/

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö deployment
            mkdir -p ~/easyroom-deployment
            cd ~/easyroom-deployment

            # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≤‡∏£ deploy
            rm -rf *
            scp -o StrictHostKeyChecking=no -i <(echo "${{ secrets.EC2_SSH_KEY }}") \
                deployment/* ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/easyroom-deployment/

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå
            ls -la

            # Login Docker Hub
            docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_TOKEN }}

            # Pull images
            docker-compose pull

            # Stop ‡πÅ‡∏•‡∏∞ remove containers ‡πÄ‡∏î‡∏¥‡∏°
            docker-compose down || true

            # Start containers ‡πÉ‡∏´‡∏°‡πà
            docker-compose up -d

            # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
            docker image prune -f

  post-deployment-check:
    name: ü©∫ Post-Deployment Verification
    needs: deploy-to-ec2
    runs-on: ubuntu-latest
    steps:
      - name: Check Frontend Availability
        run: |
          sleep 30  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ container ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
          response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_HOST }}:8080)
          if [ $response -ne 200 ]; then
            echo "Frontend not responding correctly"
            exit 1
          fi

      - name: Check Backend Availability
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_HOST }}:3000/health || echo 404)
          if [ $response -ne 200 ]; then
            echo "Backend not responding correctly"
            exit 1
          fi
