name: EasyRoom Deployment Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-push:
    name: 🏗️ Build and Push Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/easyroom-frontend:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/easyroom-frontend:${{ github.sha }}

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.backend
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/easyroom-backend:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/easyroom-backend:${{ github.sha }}

  deploy-to-ec2:
    name: 🚀 Deploy to EC2
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Verify easyroom.sql exists
        run: |
          if [ -f "easyroom.sql" ]; then
            echo "✅ easyroom.sql found in repository"
            ls -lh easyroom.sql
          else
            echo "❌ Error: easyroom.sql not found in repository"
            exit 1
          fi

      - name: Install Docker on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt-get update
              sudo apt-get install -y docker.io docker-compose
              sudo usermod -aG docker $USER
              newgrp docker
            else
              echo "Docker already installed"
            fi

      - name: Prepare Deployment Directory
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            mkdir -p ~/easyroom-deployment
            chmod 755 ~/easyroom-deployment
            echo "Directory prepared: $(ls -ld ~/easyroom-deployment)"

      - name: Transfer easyroom.sql
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "easyroom.sql"
          target: "~/easyroom-deployment/"
          overwrite: true
          timeout: 5m

      - name: Verify File Transfer
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/easyroom-deployment
            if [ -f easyroom.sql ]; then
              echo "✅ File verified:"
              ls -lh easyroom.sql
              echo "File content head:"
              head -n 5 easyroom.sql
            else
              echo "❌ Error: File transfer failed"
              exit 1
            fi

      - name: Deploy Application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_timeout: 15m
          script: |
            set -e

            # Switch to deployment directory
            cd ~/easyroom-deployment

            # Cleanup previous deployment
            docker-compose down -v --remove-orphans || true

            # Create .env file
            cat > .env <<EOL
            FRONTEND_PORT=80
            BACKEND_PORT=3000
            API_PORT=3000
            API_HOST=0.0.0.0

            DB_HOST=mysql
            DB_PORT=3306
            DB_USER=easyroomteam
            DB_PASSWORD=1234
            DB_NAME=easyroom

            MYSQL_ROOT_PASSWORD=1234
            MYSQL_DATABASE=easyroom
            MYSQL_USER=easyroomteam
            MYSQL_PASSWORD=1234
            MYSQL_CONTAINER_PORT=3306
            MYSQL_HOST_PORT=3306
            EOL

            # Generate docker-compose.yml
            cat > docker-compose.yml <<EOL
            version: "3.8"
            services:
              frontend:
                image: ${{ secrets.DOCKER_HUB_USERNAME }}/easyroom-frontend:latest
                ports:
                  - "80:80"
                restart: unless-stopped

              backend:
                image: ${{ secrets.DOCKER_HUB_USERNAME }}/easyroom-backend:latest
                ports:
                  - "3000:3000"
                env_file: .env
                depends_on:
                  mysql:
                    condition: service_healthy
                networks:
                  - easyroom-net

              mysql:
                image: mysql:8.0
                environment:
                  MYSQL_ROOT_PASSWORD: 1234
                  MYSQL_DATABASE: easyroom
                  MYSQL_USER: easyroomteam
                  MYSQL_PASSWORD: 1234
                  MYSQL_INIT_COMMAND: "source /docker-entrypoint-initdb.d/easyroom.sql"
                ports:
                  - "3306:3306"
                volumes:
                  - mysql_data:/var/lib/mysql
                  - ./easyroom.sql:/docker-entrypoint-initdb.d/easyroom.sql
                healthcheck:
                  test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u$$MYSQL_USER", "-p$$MYSQL_PASSWORD"]
                  interval: 10s
                  timeout: 5s
                  retries: 10
                  start_period: 30s
                networks:
                  - easyroom-net

            networks:
              easyroom-net:
                driver: bridge

            volumes:
              mysql_data:
            EOL

            # Pull latest images
            docker-compose pull

            # Start services
            docker-compose up -d --build

            # Verify deployment
            echo "📦 Running containers:"
            docker-compose ps
            echo "🔍 Checking frontend:"
            curl -I http://localhost || true
            echo "🔍 Checking backend:"
            curl -I http://localhost:3000 || true

      - name: Health Check
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/easyroom-deployment
            docker-compose exec mysql mysql -u easyroomteam -p1234 -e "USE easyroom; SHOW TABLES;" || exit 1
