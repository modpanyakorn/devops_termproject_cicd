name: EasyRoom Deployment Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    name: 🧪 Test & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # ต้องการประวัติ git ทั้งหมดสำหรับ SonarQube

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Install Dependencies for Backend
        run: |
          cd src/backend
          npm ci

      - name: Run Backend Tests
        run: |
          cd src/backend
          npm test || echo "No tests specified"

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Quality Gate Check
        uses: SonarSource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        # ตรวจสอบผลลัพธ์ของการสแกน SonarQube แต่ให้ผ่านไปได้แม้จะไม่ผ่าน Quality Gate
        continue-on-error: true

  build-and-push:
    name: 🏗️ Build and Push Images
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/easyroom-frontend:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/easyroom-frontend:${{ github.sha }}

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.backend
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/easyroom-backend:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/easyroom-backend:${{ github.sha }}

  deploy-to-ec2:
    name: 🚀 Deploy to EC2
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Verify easyroom.sql exists
        run: |
          if [ -f "easyroom.sql" ]; then
            echo "✅ easyroom.sql found in repository"
            ls -lh easyroom.sql
          else
            echo "❌ Error: easyroom.sql not found in repository"
            exit 1
          fi

      - name: Install Docker on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt-get update
              sudo apt-get install -y docker.io docker-compose
              sudo usermod -aG docker $USER
              newgrp docker
            else
              echo "Docker already installed"
            fi

      - name: Prepare Deployment Directory
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            mkdir -p ~/easyroom-deployment
            chmod 755 ~/easyroom-deployment
            echo "Directory prepared: $(ls -ld ~/easyroom-deployment)"

      - name: Transfer Files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "easyroom.sql,wait-for-it.sh"
          target: "~/easyroom-deployment/"
          overwrite: true
          timeout: 5m

      - name: Verify File Transfer
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/easyroom-deployment
            chmod +x wait-for-it.sh
            if [ -f easyroom.sql ] && [ -f wait-for-it.sh ]; then
              echo "✅ Files verified:"
              ls -lh easyroom.sql wait-for-it.sh
            else
              echo "❌ Error: File transfer failed"
              exit 1
            fi

      - name: Create DB Init Script
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/easyroom-deployment

            # Create a script to optimize MySQL init
            cat > init-db.sh <<EOL
            #!/bin/bash
            set -e

            echo "Creating EasyRoom database if it doesn't exist..."

            # Wait for MySQL to be ready
            until mysql -h\${MYSQL_HOST} -P\${MYSQL_PORT} -u\${MYSQL_USER} -p\${MYSQL_PASSWORD} -e "SELECT 1"; do
              echo "MySQL not ready yet - waiting..."
              sleep 3
            done

            # Create database if not exists
            mysql -h\${MYSQL_HOST} -P\${MYSQL_PORT} -u\${MYSQL_USER} -p\${MYSQL_PASSWORD} -e "CREATE DATABASE IF NOT EXISTS \${MYSQL_DATABASE}"

            # Import the SQL file
            echo "Importing database schema and data..."
            mysql -h\${MYSQL_HOST} -P\${MYSQL_PORT} -u\${MYSQL_USER} -p\${MYSQL_PASSWORD} \${MYSQL_DATABASE} < /docker-entrypoint-initdb.d/easyroom.sql

            echo "Database initialization completed!"
            EOL

            chmod +x init-db.sh

      - name: Setup Configuration (Docker Compose)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_timeout: 15m
          script: |
            set -e

            # Switch to deployment directory
            cd ~/easyroom-deployment

            # Cleanup previous deployment
            docker-compose down -v --remove-orphans || true

            # Create .env file
            cat > .env <<EOL
            FRONTEND_PORT=80
            BACKEND_PORT=3000
            API_PORT=3000
            API_HOST=0.0.0.0

            DB_HOST=mysql
            DB_PORT=3306
            DB_USER=easyroomteam
            DB_PASSWORD=1234
            DB_NAME=easyroom

            MYSQL_ROOT_PASSWORD=1234
            MYSQL_DATABASE=easyroom
            MYSQL_USER=easyroomteam
            MYSQL_PASSWORD=1234
            MYSQL_CONTAINER_PORT=3306
            MYSQL_HOST_PORT=3306

            # For docker-compose variable replacement
            DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}
            EOL

            # Generate docker-compose.yml
            cat > docker-compose.yml <<EOL
            version: "3.8"
            services:
              frontend:
                image: \${DOCKER_HUB_USERNAME}/easyroom-frontend:latest
                ports:
                  - "80:80"
                restart: unless-stopped
                depends_on:
                  - backend

              backend:
                image: \${DOCKER_HUB_USERNAME}/easyroom-backend:latest
                ports:
                  - "3000:3000"
                env_file: .env
                volumes:
                  - ./wait-for-it.sh:/wait-for-it.sh
                entrypoint: ["/bin/sh", "-c", "chmod +x /wait-for-it.sh && /wait-for-it.sh mysql:3306 node server.js"]
                restart: unless-stopped
                depends_on:
                  mysql:
                    condition: service_healthy
                networks:
                  - easyroom-net

              mysql:
                image: mysql:8.0
                command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
                environment:
                  MYSQL_ROOT_PASSWORD: 1234
                  MYSQL_DATABASE: easyroom
                  MYSQL_USER: easyroomteam
                  MYSQL_PASSWORD: 1234
                ports:
                  - "3306:3306"
                volumes:
                  - mysql_data:/var/lib/mysql
                  - ./easyroom.sql:/docker-entrypoint-initdb.d/easyroom.sql
                healthcheck:
                  test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u\$\$MYSQL_USER", "-p\$\$MYSQL_PASSWORD"]
                  interval: 5s
                  timeout: 5s
                  retries: 10
                  start_period: 15s
                networks:
                  - easyroom-net

            networks:
              easyroom-net:
                driver: bridge

            volumes:
              mysql_data:
            EOL

      - name: Deploy Application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_timeout: 15m
          script: |
            set -e

            # Switch to deployment directory
            cd ~/easyroom-deployment

            # Stop previous deployment
            docker-compose down --remove-orphans || true

            # Remove only application images (easyroom-frontend and easyroom-backend)
            echo "🗑️ Removing application images..."
            docker images | grep -E "${DOCKER_HUB_USERNAME}/easyroom-(frontend|backend)" | awk '{print $1":"$2}' | xargs -r docker rmi -f || true

            # Login to Docker Hub
            echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

            # Pull latest images
            echo "⬇️ Pulling latest images..."
            docker-compose pull

            # Start new deployment
            echo "🚀 Starting containers..."
            docker-compose up -d

            # Verify deployment started
            echo "📦 Running containers:"
            docker-compose ps

  post-deploy:
    name: 📊 Post-Deployment Tasks
    needs: deploy-to-ec2
    runs-on: ubuntu-latest
    steps:
      - name: Health Check
        uses: appleboy/ssh-action@master
        if: always()
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/easyroom-deployment

            echo "🔍 Application Status:"
            docker-compose ps

            echo "📊 MySQL Status:"
            docker-compose exec mysql mysqladmin -ueasyroomteam -p1234 status || echo "MySQL not ready yet"

            echo "📝 Recent Container Logs:"
            docker-compose logs --tail 20

      - name: Notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment completed successfully!"
            # Add actual notification here (e.g., Slack, Discord, etc.)
          else
            echo "❌ Deployment failed or has issues!"
            # Add actual notification here
          fi
