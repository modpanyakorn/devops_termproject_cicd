name: EasyRoom Deployment Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-push:
    name: 🏗️ Build and Push Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/easyroom-frontend:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/easyroom-frontend:${{ github.sha }}

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.backend
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/easyroom-backend:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/easyroom-backend:${{ github.sha }}

  deploy-to-ec2:
    name: 🚀 Deploy to EC2
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checking easyroom.sql file
        run: |
          find . -name easyroom.sql -type f || echo "⚠️ easyroom.sql not found"

      - name: Create deployment directory on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            mkdir -p ~/easyroom-deployment

      - name: Copy easyroom.sql to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "easyroom.sql" # ไม่ต้องมี ./
          target: "~/easyroom-deployment/"
        if: success() && steps.check-sql.outcome == 'success' # ต้องเพิ่ม step ก่อนหน้านี้เพื่อตรวจสอบไฟล์

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/easyroom-deployment

            # ตรวจสอบไฟล์
            if [ ! -f easyroom.sql ]; then
              echo "❌ Error: easyroom.sql not found on EC2"
              exit 1
            fi

            # สร้าง .env file
            cat > .env << EOL
            FRONTEND_PORT=80
            BACKEND_PORT=3000
            API_PORT=3000
            API_HOST=0.0.0.0

            DB_HOST=mysql
            DB_PORT=3306
            DB_USER=easyroomteam
            DB_PASSWORD=1234
            DB_NAME=easyroom

            MYSQL_ROOT_PASSWORD=1234
            MYSQL_DATABASE=easyroom
            MYSQL_USER=easyroomteam
            MYSQL_PASSWORD=1234
            MYSQL_CONTAINER_PORT=3306
            MYSQL_HOST_PORT=3306
            EOL

            # สร้าง docker-compose.yml
            cat > docker-compose.yml << EOL
            version: "3.8"
            services:
              apache-web-server:
                image: ${{ secrets.DOCKER_HUB_USERNAME }}/easyroom-frontend:latest
                ports:
                  - "80:80"
                restart: always

              node:
                image: ${{ secrets.DOCKER_HUB_USERNAME }}/easyroom-backend:latest
                ports:
                  - "3000:3000"
                env_file:
                  - .env
                environment:
                  - DB_HOST=mysql
                  - DB_PORT=3306
                  - DB_USER=easyroomteam
                  - DB_PASSWORD=1234
                  - DB_NAME=easyroom
                restart: always
                depends_on:
                  mysql:
                    condition: service_healthy
                networks:
                  - my-network

              mysql:
                image: mysql:latest
                environment:
                  MYSQL_ROOT_PASSWORD: 1234
                  MYSQL_DATABASE: easyroom
                  MYSQL_USER: easyroomteam
                  MYSQL_PASSWORD: 1234
                  MYSQL_INIT_COMMAND: "source /docker-entrypoint-initdb.d/easyroom.sql"
                ports:
                  - "3306:3306"
                volumes:
                  - db_data:/var/lib/mysql
                  - ./easyroom.sql:/docker-entrypoint-initdb.d/easyroom.sql
                healthcheck:
                  test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u$$MYSQL_USER", "-p$$MYSQL_PASSWORD"]
                  interval: 10s
                  timeout: 5s
                  retries: 10
                  start_period: 30s
                restart: always
                networks:
                  - my-network

            networks:
              my-network:
                driver: bridge

            volumes:
              db_data:

            EOL

            # Login Docker Hub
            # docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_TOKEN }}

            docker-compose pull
            docker-compose down || true
            docker-compose up -d --build
            docker-compose ps
