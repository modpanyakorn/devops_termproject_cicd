name: EasyRoom Deployment Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    name: 🔍 Prepare Deployment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Copy .env Files
        run: |
          cp .env src/backend/.env
          cat src/backend/.env

      - name: Verify Project Structure
        run: |
          echo "Checking project structure..."
          test -f .env || (echo "❌ Root .env file missing" && exit 1)
          test -f src/backend/.env || (echo "❌ Backend .env file missing" && exit 1)
          test -d src/frontend || (echo "❌ Frontend directory missing" && exit 1)
          test -d src/backend || (echo "❌ Backend directory missing" && exit 1)
          echo "✅ Project structure validated"

  build-frontend:
    name: 🌐 Build Frontend Image
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/easyroom-frontend:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/easyroom-frontend:${{ github.sha }}

  build-backend:
    name: 🚀 Build Backend Image
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.backend
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/easyroom-backend:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/easyroom-backend:${{ github.sha }}

  deploy-to-ec2:
    name: 🖥️ Deploy to EC2
    needs:
      - build-frontend
      - build-backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # สร้างโฟลเดอร์
            mkdir -p ~/easyroom-deployment
            cd ~/easyroom-deployment

            # สร้าง .env 
            cat > .env << EOL
            DB_HOST=mysql
            DB_PORT=3306
            DB_USER=easyroomteam
            DB_PASSWORD=1234
            DB_NAME=easyroom
            API_HOST=0.0.0.0
            API_PORT=3000
            EOL

            # สร้าง docker-compose.yml
            cat > docker-compose.yml << EOL
            # ใช้ docker-compose.yml ที่แนะนำข้างบน
            EOL

            # Deploy
            docker-compose down
            docker-compose pull
            docker-compose up -d

            # ตรวจสอบ
            docker-compose ps
            docker logs easyroom-deployment-node-1

  post-deployment-check:
    name: 🩺 Post-Deployment Verification
    needs: deploy-to-ec2
    runs-on: ubuntu-latest
    steps:
      - name: Check Frontend Availability
        run: |
          # รอให้ container เริ่มทำงาน
          sleep 60  # เพิ่มเวลารอให้มากขึ้น

          # ตรวจสอบด้วย curl แบบ verbose
          curl -v http://${{ secrets.EC2_HOST }}:80

          # ตรวจสอบ HTTP status code
          response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_HOST }}:80)
          echo "Response code: $response"

          # ตรวจสอบ containers บน EC2
          ssh -i <(echo "${{ secrets.EC2_SSH_KEY }}") \
              ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
              "docker ps -a"

      - name: Check Backend Availability
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_HOST }}:3000/health || echo 404)
          if [ $response -ne 200 ]; then
            echo "Backend not responding correctly"
            exit 1
          fi
