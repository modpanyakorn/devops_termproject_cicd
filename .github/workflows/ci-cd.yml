name: Deploy to AWS EC2

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.frontend
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/easyroom-frontend:latest

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.backend
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/easyroom-backend:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Verify SSH connection
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: "120s"
          script: |
            echo "SSH connection successful"
            echo "Running as user: $(whoami)"
            echo "Current directory: $(pwd)"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: "180s"
          command_timeout: "20m"
          script: |
            # สร้างโฟลเดอร์ถ้ายังไม่มี
            mkdir -p ~/easyroom-deployment
            cd ~/easyroom-deployment

            # สร้างไฟล์ .env
            cat > .env << EOL
            # Production environment
            FRONTEND_PORT=80
            BACKEND_PORT=3000
            API_PORT=3000
            API_HOST=0.0.0.0

            DB_HOST=mysql
            DB_PORT=3306
            DB_USER=easyroomteam
            DB_PASSWORD=1234
            DB_NAME=easyroom

            MYSQL_ROOT_PASSWORD=1234
            MYSQL_DATABASE=easyroom
            MYSQL_USER=easyroomteam
            MYSQL_PASSWORD=1234
            MYSQL_CONTAINER_PORT=3306
            MYSQL_HOST_PORT=3306

            DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}
            EOL

            # สร้างไฟล์ docker-compose.yml
            cat > docker-compose.yml << EOL
            version: "3.8"

            services:
              apache-web-server:
                image: ${{ secrets.DOCKER_HUB_USERNAME }}/easyroom-frontend:latest
                restart: always
                ports:
                  - "80:80"
                networks:
                  - my-network

              node:
                image: ${{ secrets.DOCKER_HUB_USERNAME }}/easyroom-backend:latest
                restart: on-failure
                env_file:
                  - .env
                ports:
                  - "\${BACKEND_PORT}:3000"
                depends_on:
                  - mysql
                volumes:
                  - backend_storage:/app/storage
                networks:
                  - my-network

              mysql:
                image: mysql:latest
                restart: always
                env_file:
                  - .env
                environment:
                  MYSQL_ROOT_PASSWORD: "\${MYSQL_ROOT_PASSWORD}"
                  MYSQL_DATABASE: "\${MYSQL_DATABASE}"
                  MYSQL_USER: "\${MYSQL_USER}"
                  MYSQL_PASSWORD: "\${MYSQL_PASSWORD}"
                volumes:
                  - db_data:/var/lib/mysql
                networks:
                  - my-network

              phpmyadmin:
                image: phpmyadmin/phpmyadmin
                depends_on:
                  - mysql
                ports:
                  - "8000:80"
                environment:
                  PMA_HOST: mysql
                  PMA_USER: root
                  PMA_PASSWORD: "\${MYSQL_ROOT_PASSWORD}"
                networks:
                  - my-network

            volumes:
              db_data:
                driver: local
              backend_storage:
                driver: local

            networks:
              my-network:
                driver: bridge
            EOL

            echo "Creating wait-for-it.sh script"
            cat > wait-for-it.sh << 'EOL'
            #!/bin/sh
            # Simple wait-for-it script

            set -e

            host="$1"
            shift
            cmd="$@"

            until nc -z -v -w5 ${host%%:*} ${host##*:}; do
              echo "⏳ รอให้ $host พร้อมให้บริการ..."
              sleep 5
            done

            echo "✅ $host พร้อมให้บริการแล้ว กำลังดำเนินการคำสั่งต่อไป..."
            exec $cmd
            EOL

            chmod +x wait-for-it.sh

            echo "Pulling Docker images"
            docker-compose pull

            echo "Stopping existing containers"
            docker-compose down || true

            echo "Starting services"
            docker-compose up -d

            echo "Deployment completed!"
