name: EasyRoom Deployment Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    name: üîç Prepare Deployment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Copy .env Files
        run: |
          cp .env src/backend/.env
          cat src/backend/.env

      - name: Verify Project Structure
        run: |
          echo "Checking project structure..."
          test -f .env || (echo "‚ùå Root .env file missing" && exit 1)
          test -f src/backend/.env || (echo "‚ùå Backend .env file missing" && exit 1)
          test -d src/frontend || (echo "‚ùå Frontend directory missing" && exit 1)
          test -d src/backend || (echo "‚ùå Backend directory missing" && exit 1)
          echo "‚úÖ Project structure validated"

  build-frontend:
    name: üåê Build Frontend Image
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/easyroom-frontend:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/easyroom-frontend:${{ github.sha }}

  build-backend:
    name: üöÄ Build Backend Image
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.backend
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/easyroom-backend:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/easyroom-backend:${{ github.sha }}

  deploy-to-ec2:
    name: üñ•Ô∏è Deploy to EC2
    needs:
      - build-frontend
      - build-backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö deployment
            mkdir -p ~/easyroom-deployment/backend
            cd ~/easyroom-deployment

            # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å .env ‡∏à‡∏≤‡∏Å localhost
            scp -o StrictHostKeyChecking=no -i <(echo "${{ secrets.EC2_SSH_KEY }}") \
                .env ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/easyroom-deployment/.env

            # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å docker-compose.yml
            cat > docker-compose.yml << EOL
            version: "3.8"
            services:
              apache-web-server:
                image: ${{ secrets.DOCKER_HUB_USERNAME }}/easyroom-frontend:latest
                volumes:
                  - ./frontend:/var/www/html/
                ports:
                  - "80:80"
                networks:
                  - my-network

              node:
                image: ${{ secrets.DOCKER_HUB_USERNAME }}/easyroom-backend:latest
                restart: on-failure
                env_file:
                  - .env
                ports:
                  - "3000:3000"
                depends_on:
                  - mysql
                volumes:
                  - ./backend/storage:/app/storage
                networks:
                  - my-network

              mysql:
                image: mysql:latest
                restart: always
                env_file:
                  - .env
                volumes:
                  - db_data:/var/lib/mysql
                  - ./easyroom-docker.sql:/docker-entrypoint-initdb.d/easyroom.sql
                networks:
                  - my-network

            networks:
              my-network:
                driver: bridge

            volumes:
              db_data:
                driver: local
            EOL

            # Login Docker Hub
            docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_TOKEN }}

            # Pull images
            docker-compose pull

            # Stop ‡πÅ‡∏•‡∏∞ remove containers ‡πÄ‡∏î‡∏¥‡∏°
            docker-compose down || true

            # Start containers ‡πÉ‡∏´‡∏°‡πà
            docker-compose up -d

            # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
            docker image prune -f

  post-deployment-check:
    name: ü©∫ Post-Deployment Verification
    needs: deploy-to-ec2
    runs-on: ubuntu-latest
    steps:
      - name: Check Frontend Availability
        run: |
          sleep 30  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ container ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
          echo "Checking frontend at http://${{ secrets.EC2_HOST }}:80"
          response=$(curl -v -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_HOST }}:80)
          echo "Response code: $response"
          if [ $response -ne 200 ]; then
            echo "Frontend not responding correctly"
            exit 1
          fi

      - name: Check Backend Availability
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_HOST }}:3000/health || echo 404)
          if [ $response -ne 200 ]; then
            echo "Backend not responding correctly"
            exit 1
          fi
